import"server-only";import{Redis as u}from"ioredis";import{Md5 as l}from"ts-md5";import{log as c}from"../../helpers/log";import{globalOptions as h}from"../index";const f={"/realtime/":{cache:!1,expireSetAfter:void 0},"/auth/":{cache:!0,expireSetAfter:60},"/storage/":{cache:!1,expireSetAfter:void 0},"/functions/":{cache:!0,expireSetAfter:30},"/rest/":{cache:!0,expireSetAfter:900}},y=async(o,r)=>{if(h?.cache?.provider!=="ioredis")return c("\u26A0\uFE0F The cache provider is not configured for redis (ioredis). Please check the configuration. Falling back to default fetch.","warn",!0),fetch(o,r);const s=new u(h.cache?.ioredis?.url),t={url:new URL(o),method:r?.method||"GET",headers:new Headers(r?.headers)},a=`/${t.url.pathname.split("/")[1]}/`;if(t.method==="GET"&&f[a]?.cache)try{const e=l.hashStr(t.url.toString()),n=await s.get(e);if(n)return c(`\u{1F3AF} Cache HIT for key \`${e}\` (${t.url.toString()})`,"debug"),new Response(n);c(`\u{1F93A} Cache MISS for key \`${e}\` (${t.url.toString()})`,"debug");const i=await fetch(o,r),d=await i.clone().text();return await s.set(e,d,"EX",f[a]?.expireSetAfter||60),i}catch(e){c(`Error fetching data from Redis: ${e}`,"error",!0)}return fetch(o,r)};export{y as RedisCacheProviderFetch};
//# sourceMappingURL=ioredis.js.map
