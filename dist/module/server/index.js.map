{
  "version": 3,
  "sources": ["../../../src/server/index.ts"],
  "sourcesContent": ["import \"server-only\";\n\nimport { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\nimport { parseOptions } from \"../helpers/parseOptions\";\nimport type {\n    ExtendedSupabaseClient,\n    GenericSchema,\n    SupabaseClientServerOptionsType,\n    UseSupabaseGenerics,\n    UseSupabaseOptions,\n} from \"../types\";\nimport { extendSupabaseClient } from \"./extend\";\n\n/**\n * Global configuration options for the Supabase client.\n *\n * This variable holds the settings that will be used across the Supabase client\n * to configure its behavior. It is of type `UseSupabaseOptions`, which should\n * define the structure and possible values for these options.\n *\n * @type {UseSupabaseOptions}\n */\nexport let globalOptions: UseSupabaseOptions;\n\n/**\n * Initializes and returns a Supabase server client with the provided options.\n *\n * @param {UseSupabaseOptions} [userOptions] - Optional configuration options for Supabase.\n * @returns {Promise<ExtendedSupabaseClient>} A promise that resolves to a Supabase client instance.\n */\nexport async function useSupabase<\n    Database = UseSupabaseGenerics[\"Database\"],\n    SchemaName extends string &\n        keyof Database = UseSupabaseGenerics<Database>[\"SchemaName\"],\n    Schema extends GenericSchema = UseSupabaseGenerics<\n        Database,\n        SchemaName\n    >[\"Schema\"],\n>(\n    userOptions?: UseSupabaseOptions,\n): Promise<ExtendedSupabaseClient<Database, SchemaName, Schema>> {\n    // Get the cookies from the request headers\n    const cookieStore = await cookies();\n\n    // Parse and validate the options\n    const { options, authStrategy } = parseOptions(userOptions);\n\n    // Initialise some variables\n    let SUPABASE_API_KEY = \"\" as string;\n\n    // Check whether we're using an API key or a JWT token for authentication. If we're using a token,\n    // it will have already been set by the `parseOptions` function\n    if (authStrategy === \"key\") {\n        // We're using a Supabase API key. Determine whether we are using the secret or publishable key based on the role\n        if (options.role === \"service_role\")\n            SUPABASE_API_KEY = options?.auth?.keys?.secret as string; // We're using the secret key\n        else SUPABASE_API_KEY = options?.auth?.keys?.publishable as string; // We're using the publishable key\n    }\n\n    // Store the global options for later use\n    globalOptions = options;\n\n    // A note on the `cookies` option and the `service_role` role:\n    //\n    //    Cookies need to be disabled when using the service role, otherwise the Supabase client tries to set cookies. This\n    //    is an issue if your current user is authenticated with Supabase Auth as the Supabase JS client forces the server\n    //    to use the RLS policies applied to cookies always (which in that case, would be your non-superadmin user).\n    //\n    // Construct a Supabase client with the provided options\n    // @ts-expect-error - Our cookies implementation is not supported by the Supabase client type definitions yet.\n    const client = createServerClient<Database, SchemaName, Schema>(\n        options.supabaseUrl,\n        SUPABASE_API_KEY,\n        {\n            cookies: {\n                /**\n                 * Retrieves all cookies from the cookie store.\n                 */\n                getAll() {\n                    // Handle cookies when using the service role (see above)\n                    if (options.role === \"service_role\") return [];\n\n                    // Return all cookies from the cookie store when not using the service role\n                    return cookieStore.getAll();\n                },\n\n                /**\n                 * Sets multiple cookies using the provided array of cookie objects.\n                 */\n                // biome-ignore lint/suspicious/noExplicitAny: This is necessary to set cookies\n                setAll(cookiesToSet: any) {\n                    // Handle cookies when using the service role (see above)\n                    if (options.role === \"service_role\") return;\n\n                    try {\n                        for (const { name, value, options } of cookiesToSet) {\n                            cookieStore.set(name, value, options);\n                        }\n                    } catch {} // The `setAll` method was called from a Server Component. This can be ignored if you have middleware refreshing user sessions.\n                },\n            },\n            // Merge the parsed client configuration with the pre-set cookies configuration option\n            ...options.config,\n        },\n    );\n\n    // Extend the Supabase client with additional functionality and return it\n    return extendSupabaseClient<Database, SchemaName, Schema>(\n        client,\n    ) as ExtendedSupabaseClient<Database, SchemaName, Schema>;\n}\n\n// Export the Supabase client hook as the default export\nexport default useSupabase;\n\n// Export Supabase types for convenient external use\nexport type {\n    ExtendedSupabaseClient as SupabaseClient,\n    SupabaseClientServerOptionsType,\n};\n"],
  "mappings": "AAAA,MAAO,cAEP,OAAS,sBAAAA,MAA0B,gBACnC,OAAS,WAAAC,MAAe,eACxB,OAAS,gBAAAC,MAAoB,0BAQ7B,OAAS,wBAAAC,MAA4B,WAW9B,IAAIC,EAQX,eAAsBC,EASlBC,EAAgC,CAGhC,MAAMC,EAAc,MAAMN,EAAO,EAG3B,CAAE,QAAAO,EAAS,aAAAC,CAAY,EAAKP,EAAaI,CAAW,EAG1D,IAAII,EAAmB,GAInBD,IAAiB,QAEbD,EAAQ,OAAS,eACjBE,EAAmBF,GAAS,MAAM,MAAM,OACvCE,EAAmBF,GAAS,MAAM,MAAM,aAIjDJ,EAAgBI,EAUhB,MAAMG,EAASX,EACXQ,EAAQ,YACRE,EACA,CACI,QAAS,CAIL,QAAM,CAEF,OAAIF,EAAQ,OAAS,eAAuB,CAAA,EAGrCD,EAAY,OAAM,CAC7B,EAMA,OAAOK,EAAiB,CAEpB,GAAIJ,EAAQ,OAAS,eAErB,GAAI,CACA,SAAW,CAAE,KAAAK,EAAM,MAAAC,EAAO,QAAAN,CAAO,IAAMI,EACnCL,EAAY,IAAIM,EAAMC,EAAON,CAAO,CAE5C,MAAQ,CAAC,CACb,GAGJ,GAAGA,EAAQ,OACd,EAIL,OAAOL,EACHQ,CAAM,CAEd,CAGA,IAAAI,EAAeV",
  "names": ["createServerClient", "cookies", "parseOptions", "extendSupabaseClient", "globalOptions", "useSupabase", "userOptions", "cookieStore", "options", "authStrategy", "SUPABASE_API_KEY", "client", "cookiesToSet", "name", "value", "index_default"]
}
