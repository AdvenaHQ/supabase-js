import{DEFAULT_HEADERS as u}from"@supabase/supabase-js/dist/module/lib/constants";import{z as s}from"zod";import{log as c}from"../helpers/log";import{RedisCacheProviderFetch as l}from"../server/cache-providers/ioredis";import{SupacacheCacheProviderFetch as o}from"../server/cache-providers/supacache";import{UpstashCacheProviderFetch as d}from"../server/cache-providers/upstash";import{VERSION as n}from"../version";import{deepMerge as f}from"./deepMerge";const p={cache:void 0,config:{db:{schema:"public"},global:{headers:{"X-Client-Info":[...`${u["X-Client-Info"]}`.split(","),`advena-supabase/${n}`].map(e=>e.trim()).filter(e=>e.trim()!=="").join(", ")}}},role:"anon",supabaseUrl:process?.env?.UPV_SECRETS_SUPABASE_URL||"",auth:{keys:{secret:process?.env?.UPV_SECRETS_SUPABASE_SERVICEROLE_KEY,publishable:process?.env?.UPV_SECRETS_SUPABASE_ANON_KEY}}},R=(e,r,i="server")=>{r=r||p;let a=f(r,e||{});return(!a.supabaseUrl||s.string().url().safeParse(a?.supabaseUrl)?.error)&&c(`You must provide a valid Supabase URL when initialising the client. Expected a URL but received: \`(${typeof a?.supabaseUrl}) ${a?.supabaseUrl}\` instead.`,"error",!0,!1),e?.cache?.provider!==void 0&&(a=v({userOptions:e,options:a,context:i})),e?.auth?.useToken&&(e?.auth?.useToken).toString().trim()!==""?a={...a,role:void 0,config:{...a?.config,global:{...a?.config?.global,headers:{...a?.config?.global?.headers,Authorization:`Bearer ${e.auth.useToken}`}}},auth:{...a.auth,keys:{secret:void 0,publishable:void 0}}}:((!a?.auth?.keys?.secret||s.string().min(1).safeParse(a?.auth?.keys?.secret)?.error)&&c(`You must configure a valid Supabase Secret Key (auth.keys.secret) or RLS Token (auth.useToken) when initialising the client, or set the \`UPV_SECRETS_SUPABASE_SERVICEROLE_KEY\` environment variable. Expected a secret key as a string but received: \`(${typeof a?.auth?.keys?.secret}) ${a?.auth?.keys?.secret}\` instead. No default key was found and \`auth.useToken\` is not set.`,"error",!0,!1),(!a?.auth?.keys?.publishable||s.string().min(1).safeParse(a?.auth?.keys?.publishable)?.error)&&c(`You must configure a valid Supabase Publishable Key (auth.keys.publishable) or RLS Token (auth.useToken) when initialising the client, or set the \`UPV_SECRETS_SUPABASE_ANON_KEY\` environment variable. Expected a publishable key as a string but received: \`(${typeof a?.auth?.keys?.publishable}) ${a?.auth?.keys?.publishable}\` instead. No default key was found and \`auth.useToken\` is not set.`,"error",!0,!1),a?.role||c(`You must configure a valid Supabase role when initialising the client, or RLS Token (auth.useToken). Expected a role as a string but received: \`(${typeof a?.role}) ${a?.role}\` instead.`,"error",!0,!1),i==="browser"&&a?.role==="service_role"&&(c("useSupabase was called requesting the Service Role in the browser context. This is not allowed as it would expose your secret key. The client was automatically configured to use the Anon Role instead.","warn",!1,!1),a={...a,role:"anon"})),i==="browser"&&(a={...a,cache:void 0,auth:{...a.auth,keys:{...a.auth?.keys,secret:void 0}}}),{options:a,authStrategy:e?.auth?.useToken?"jwt":"key"}},v=({userOptions:e,options:r,context:i="server"})=>{const a=()=>(e?.cache?.provider!=="upstash-redis"||((!e?.cache?.upstash?.url||s.string().url().safeParse(e?.cache?.upstash?.url)?.error)&&c(`You must provide a valid Upstash URL (\`cache.upstash.url\`) when using Upstash as the cache provider. Expected a URL but received: \`(${typeof e?.cache?.upstash?.url}) ${e?.cache?.upstash?.url}\` instead.`,"error",!0,!1),(!e?.cache?.upstash?.token||s.string().min(1).safeParse(e?.cache?.upstash?.token)?.error)&&c(`You must provide a valid Upstash token (\`cache.upstash.token\`) when using Upstash as the cache provider. Expected a string but received: \`(${typeof e?.cache?.upstash?.token}) ${e?.cache?.upstash?.token}\` instead.`,"error",!0,!1),r={...r,cache:{...r?.cache,provider:"upstash-redis",upstash:{...e?.cache?.upstash,url:e?.cache?.upstash?.url||"",token:e?.cache?.upstash?.token||"",behaviour:{expireSetAfter:e?.cache?.upstash?.behaviour||void 0}}},config:{...r?.config,global:{...r?.config?.global,fetch:d}}}),r),t=()=>(e?.cache?.provider!=="ioredis"||((!e?.cache?.ioredis?.url||s.string().startsWith("redis://").safeParse(e?.cache?.ioredis?.url)?.error)&&c(`You must provide a valid Redis Connection URL (\`cache.ioredis.url\`) when using Redis (ioredis) as the cache provider. Expected a URL starting with "redis://" but received: \`(${typeof e?.cache?.ioredis?.url}) ${e?.cache?.ioredis?.url}\` instead.`,"error",!0,!1),r={...r,cache:{...r?.cache,provider:"ioredis",ioredis:{url:e?.cache?.ioredis?.url||process.env.SECRETS_SUPABASE_REDISCACHE_URL||""}},config:{...r?.config,global:{...r?.config?.global,fetch:l}}}),r),h=()=>(e?.cache?.provider!=="supacache"||((!e?.cache?.supacache?.url||s.string().url().startsWith("https://").safeParse(e?.cache?.supacache?.url)?.error)&&c(`You must provide a valid Supacache Middleware Worker URL (\`cache.supacache.url\`) when using Supacache as the cache provider. Expected a valid URL starting with "https://" but received: \`(${typeof e?.cache?.supacache?.url}) ${e?.cache?.supacache?.url}\` instead.`,"error",!0,!1),(!e?.cache?.supacache?.serviceKey||s.string().min(1).safeParse(e?.cache?.supacache?.serviceKey)?.error)&&c("\u26A0\uFE0F Supabase is configured to use supacache as the cache provider, but a supacache service key was not provided. This is not secure and may expose your cache to unauthorized access. Please review the documentation at https://github.com/AdvenaHQ/supacache?tab=readme-ov-file#%EF%B8%8F-setup for instructions on how to do this.","warn",!1,!0),r={...r,cache:{...r?.cache,provider:"supacache",supacache:{url:e?.cache?.supacache?.url||process.env.SECRETS_SUPABASE_SUPACACHE_URL||"",serviceKey:e?.cache?.supacache?.serviceKey||process.env.SECRETS_SUPABASE_SUPACACHE_SERVICE_KEY||void 0}},config:{...r?.config,global:{...r?.config?.global,fetch:o}}}),r);return i!=="server"?(r.cache=void 0,c(`The client was initialised with a cache provider, but the context is ${i}. Caching is only available in server contexts. Caching was automatically disabled to prevent errors.`,"info"),r):(e?.cache?.provider==="supacache"&&(r=h()),e?.cache?.provider==="upstash-redis"&&(r=a()),e?.cache?.provider==="ioredis"&&(r=t()),r)};export{R as parseOptions};
//# sourceMappingURL=parseOptions.js.map
