{
  "version": 3,
  "sources": ["../../../../src/server/cache-providers/upstash.ts"],
  "sourcesContent": ["import \"server-only\";\n\nimport { Redis } from \"@upstash/redis\";\nimport { Md5 as md5 } from \"ts-md5\";\nimport { log } from \"../../helpers/log\";\nimport type { Fetch, RedisConfigNodejs } from \"../../types\";\nimport { globalOptions } from \"../index\";\n\n/**\n * Configuration object for route caching settings.\n *\n * Each key represents a route and maps to an object containing cache settings.\n *\n * @typeParam {Object} routeConfigs - The route configuration object.\n * @property {boolean} cache - Indicates whether caching is enabled for the route.\n * @property {number | undefined} expireSetAfter - The time in seconds after which the cache expires.\n *                                                 If undefined, the cache does not expire.\n */\nconst routeConfigs: {\n    [key: string]: { cache: boolean; expireSetAfter: number | undefined };\n} = {\n    \"/realtime/\": {\n        cache: false,\n        expireSetAfter: undefined,\n    },\n    \"/auth/\": {\n        cache: true,\n        expireSetAfter: 60,\n    },\n    \"/storage/\": {\n        cache: false,\n        expireSetAfter: undefined,\n    },\n    \"/functions/\": {\n        cache: true,\n        expireSetAfter: 30,\n    },\n    \"/rest/\": {\n        cache: true,\n        expireSetAfter: 900,\n    },\n};\n\n/**\n * Fetch function that integrates with Upstash Redis for caching GET requests.\n *\n * @param input - The input URL or Request object for the fetch request.\n * @param init - Optional configuration object for the fetch request.\n *\n * @returns A Promise that resolves to a Response object. If the request method is GET and the response is cached,\n *          it returns the cached response. Otherwise, it fetches the response from the server, caches it, and returns it.\n */\nexport const UpstashCacheProviderFetch: Fetch = async (\n    input,\n    init?: RequestInit,\n) => {\n    // Make sure the cache provider is configured for Upstash Redis\n    if (globalOptions?.cache?.provider !== \"upstash-redis\") {\n        // Log a warning message and fall back to the default fetch\n        log(\n            \"\u26A0\uFE0F The cache provider is not configured for Upstash Redis. Please check the configuration. Falling back to default fetch.\",\n            \"warn\",\n            true,\n        );\n\n        // Return the default fetch\n        return fetch(input, init);\n    }\n\n    // Connect to the Upstash Redis instance\n    const redis = new Redis({\n        url: globalOptions.cache?.upstash?.url,\n        token: globalOptions.cache?.upstash?.token,\n    });\n\n    // Create a request object from the input and init parameters\n    const request = {\n        url: new URL(input as string),\n        method: init?.method || \"GET\",\n        headers: new Headers(init?.headers),\n    };\n\n    // Determine the route of the request\n    const route = `/${request.url.pathname.split(\"/\")[1]}/`;\n\n    // Check if the request method is a GET request\n    if (request.method === \"GET\") {\n        // Check if the route is configured for caching\n        if (routeConfigs[route]?.cache) {\n            try {\n                // Get the cache key from the request URL\n                const cacheKey = md5.hashStr(request.url.toString());\n\n                // Check if the cache key exists in the cache\n                const cachedResponse = await redis.get(cacheKey as string);\n\n                // Check if the cached response exists\n                if (cachedResponse) {\n                    // Log that the response is being returned from the cache\n                    log(\n                        `\uD83C\uDFAF Cache HIT for key \\`${cacheKey}\\` (${request.url.toString()})`,\n                        \"debug\",\n                    );\n\n                    // Return the cached response as a Response object\n                    return new Response(JSON.stringify(cachedResponse));\n                }\n\n                // Log that the response is not cached\n                log(\n                    `\uD83E\uDD3A Cache MISS for key \\`${cacheKey}\\` (${request.url.toString()})`,\n                    \"debug\",\n                );\n\n                // Fetch the data from the server\n                const response = await fetch(input, init);\n\n                // Clone the response to read its body\n                const responseClone = response.clone();\n                const responseBody = await responseClone.text();\n\n                // Store the response body in the cache\n                await redis.set(cacheKey, responseBody, {\n                    // Set the expiry time for the cache\n                    ex:\n                        globalOptions?.cache?.upstash?.behaviour\n                            ?.expireSetAfter ||\n                        routeConfigs[route]?.expireSetAfter ||\n                        60,\n                });\n\n                // Return the original response\n                return response;\n            } catch (error) {\n                log(\n                    `Error fetching data from Upstash Redis: ${error}`,\n                    \"error\",\n                    true,\n                );\n            }\n        }\n    }\n\n    // The request method is not a GET request. Fetch the data from the server and return it\n    return fetch(input, init);\n};\n\n/**\n * Options for configuring the Supabase cache provider using Upstash Redis.\n */\nexport type UseSupabaseCacheUpstashRedisProviderOptions = {\n    /**\n     * The cache provider key for this cache provider.\n     */\n    provider: \"upstash-redis\";\n\n    /**\n     * Configuration options for the Upstash Redis cache provider.\n     */\n    upstash: {\n        /**\n         * The URL of the Upstash Redis instance.\n         */\n        url: RedisConfigNodejs[\"url\"];\n\n        /**\n         * The token for the Upstash Redis instance.\n         */\n        token: RedisConfigNodejs[\"token\"];\n\n        /**\n         * The configuration options for the Upstash Redis client.\n         */\n        config?: RedisConfigNodejs;\n\n        /**\n         * The behavior options for the Upstash Redis cache provider.\n         */\n        behaviour?: {\n            /**\n             * The time, in seconds, after which cached responses should expire and be dropped from the cache.\n             *\n             * @default 3600 (1 hour)\n             */\n            expireSetAfter?: number | undefined;\n        };\n    } & RedisConfigNodejs;\n};\n"],
  "mappings": "6GAAA,QAAA,aAAA,EAEA,MAAAA,EAAA,QAAA,gBAAA,EACAC,EAAA,QAAA,QAAA,EACAC,EAAA,QAAA,mBAAA,EAEAC,EAAA,QAAA,UAAA,EAYMC,EAEF,CACA,aAAc,CACV,MAAO,GACP,eAAgB,QAEpB,SAAU,CACN,MAAO,GACP,eAAgB,IAEpB,YAAa,CACT,MAAO,GACP,eAAgB,QAEpB,cAAe,CACX,MAAO,GACP,eAAgB,IAEpB,SAAU,CACN,MAAO,GACP,eAAgB,MAaXC,EAAmC,MAC5CC,EACAC,IACA,CAEA,GAAIJ,EAAA,eAAe,OAAO,WAAa,gBAEnC,SAAAD,EAAA,KACI,sIACA,OACA,EAAI,EAID,MAAMI,EAAOC,CAAI,EAI5B,MAAMC,EAAQ,IAAIR,EAAA,MAAM,CACpB,IAAKG,EAAA,cAAc,OAAO,SAAS,IACnC,MAAOA,EAAA,cAAc,OAAO,SAAS,MACxC,EAGKM,EAAU,CACZ,IAAK,IAAI,IAAIH,CAAe,EAC5B,OAAQC,GAAM,QAAU,MACxB,QAAS,IAAI,QAAQA,GAAM,OAAO,GAIhCG,EAAQ,IAAID,EAAQ,IAAI,SAAS,MAAM,GAAG,EAAE,CAAC,CAAC,IAGpD,GAAIA,EAAQ,SAAW,OAEfL,EAAaM,CAAK,GAAG,MACrB,GAAI,CAEA,MAAMC,EAAWV,EAAA,IAAI,QAAQQ,EAAQ,IAAI,SAAQ,CAAE,EAG7CG,EAAiB,MAAMJ,EAAM,IAAIG,CAAkB,EAGzD,GAAIC,EAEA,SAAAV,EAAA,KACI,iCAA0BS,CAAQ,OAAOF,EAAQ,IAAI,SAAQ,CAAE,IAC/D,OAAO,EAIJ,IAAI,SAAS,KAAK,UAAUG,CAAc,CAAC,KAItDV,EAAA,KACI,kCAA2BS,CAAQ,OAAOF,EAAQ,IAAI,SAAQ,CAAE,IAChE,OAAO,EAIX,MAAMI,EAAW,MAAM,MAAMP,EAAOC,CAAI,EAIlCO,EAAe,MADCD,EAAS,MAAK,EACK,KAAI,EAG7C,aAAML,EAAM,IAAIG,EAAUG,EAAc,CAEpC,GACIX,EAAA,eAAe,OAAO,SAAS,WACzB,gBACNC,EAAaM,CAAK,GAAG,gBACrB,GACP,EAGMG,CACX,OAASE,EAAO,IACZb,EAAA,KACI,2CAA2Ca,CAAK,GAChD,QACA,EAAI,CAEZ,CAKR,OAAO,MAAMT,EAAOC,CAAI,CAC5B,EA7Fa,QAAA,0BAAyBF",
  "names": ["redis_1", "ts_md5_1", "log_1", "index_1", "routeConfigs", "UpstashCacheProviderFetch", "input", "init", "redis", "request", "route", "cacheKey", "cachedResponse", "response", "responseBody", "error"]
}
