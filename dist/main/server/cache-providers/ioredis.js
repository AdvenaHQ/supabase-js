"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.RedisCacheProviderFetch=void 0,require("server-only");const f=require("ioredis"),l=require("ts-md5"),c=require("../../helpers/log"),d=require("../index"),h={"/realtime/":{cache:!1,expireSetAfter:void 0},"/auth/":{cache:!0,expireSetAfter:60},"/storage/":{cache:!1,expireSetAfter:void 0},"/functions/":{cache:!0,expireSetAfter:30},"/rest/":{cache:!0,expireSetAfter:900}},g=async(o,r)=>{if(d.globalOptions?.cache?.provider!=="ioredis")return(0,c.log)("\u26A0\uFE0F The cache provider is not configured for redis (ioredis). Please check the configuration. Falling back to default fetch.","warn",!0),fetch(o,r);const s=new f.Redis(d.globalOptions.cache?.ioredis?.url),t={url:new URL(o),method:r?.method||"GET",headers:new Headers(r?.headers)},i=`/${t.url.pathname.split("/")[1]}/`;if(t.method==="GET"&&h[i]?.cache)try{const e=l.Md5.hashStr(t.url.toString()),a=await s.get(e);if(a)return(0,c.log)(`\u{1F3AF} Cache HIT for key \`${e}\` (${t.url.toString()})`,"debug"),new Response(a);(0,c.log)(`\u{1F93A} Cache MISS for key \`${e}\` (${t.url.toString()})`,"debug");const n=await fetch(o,r),u=await n.clone().text();return await s.set(e,u,"EX",h[i]?.expireSetAfter||60),n}catch(e){(0,c.log)(`Error fetching data from Redis: ${e}`,"error",!0)}return fetch(o,r)};exports.RedisCacheProviderFetch=g;
//# sourceMappingURL=ioredis.js.map
