{
  "version": 3,
  "sources": ["../../../../src/server/cache-providers/supacache.ts"],
  "sourcesContent": ["import \"server-only\";\n\nimport { log } from \"../../helpers/log\";\nimport type { Fetch } from \"../../types\";\nimport { globalOptions } from \"../index\";\n\n/**\n * Fetch function that integrates with Upstash Redis for caching GET requests.\n *\n * @param input - The input URL or Request object for the fetch request.\n * @param init - Optional configuration object for the fetch request.\n *\n * @returns A Promise that resolves to a Response object. If the request method is GET and the response is cached,\n *          it returns the cached response. Otherwise, it fetches the response from the server, caches it, and returns it.\n */\nexport const SupacacheCacheProviderFetch: Fetch = async (\n    input,\n    init?: RequestInit,\n) => {\n    // Make sure the cache provider is configured for Upstash Redis\n    if (globalOptions?.cache?.provider !== \"supacache\") {\n        // Log a warning message and fall back to the default fetch\n        log(\n            \"\u26A0\uFE0F The cache provider is not configured for supacache. Please check the configuration. Falling back to default fetch.\",\n            \"warn\",\n            true,\n        );\n\n        // Return the default fetch\n        return fetch(input, init);\n    }\n\n    // Create a request object from the input and init parameters\n    const request = {\n        url: new URL(input as string),\n        method: init?.method || \"GET\",\n        headers: new Headers(init?.headers),\n    };\n\n    // Parse the configured supacache URL for later use\n    const supacacheUrl = new URL(\n        globalOptions?.cache?.supacache?.url as string,\n    );\n\n    // Check if the request method is a GET request\n    if (request.method === \"GET\") {\n        // It is a GET request. Initialise the headers for the fetch request\n        const fetchHeaders = new Headers({\n            ...Object.fromEntries(request?.headers?.entries()),\n            ...(globalOptions?.config?.global?.headers || {}),\n        });\n\n        if (\n            request.url.hostname.includes(supacacheUrl.hostname) || // Check if the request URL contains the supacache middleware service domain\n            request.url.hostname.includes(\".supabase.co\")\n        )\n            // Example of adding custom headers\n\n            // Check to see if the request url contains a Supabase URL (if it does, we\n            // need to replace it with the supacache URL). Otherwise, if it's the same domain as the\n            // configured supacache url, we can just proceed with the request.\n            // Check if the request URL contains the Supabase domain\n            request.url.hostname = supacacheUrl.hostname; // One of the conditions were met. Replace the request url domain (the Supabase URL) with the Supacache URL\n\n        // Set the service key header for the Supacache middleware service\n        fetchHeaders.set(\n            \"x-cache-service-key\",\n            globalOptions?.cache?.supacache?.serviceKey as string,\n        );\n\n        // Fetch the data from the middleware service (supacache worker) and return the result\n        return fetch(request.url, {\n            ...init,\n            headers: fetchHeaders,\n        });\n    }\n\n    // It is not a GET request. Fetch the data from the server and return the result\n    return fetch(input, init);\n};\n\n/**\n * Options for configuring the Supabase cache provider using Supacache.\n */\nexport type UseSupabaseCacheSupacacheProviderOptions = {\n    /**\n     * The cache provider key for this cache provider.\n     */\n    provider: \"supacache\";\n\n    /**\n     * Configuration options for the Supacache (middleware) cache provider.\n     *\n     * @see https://github.com/AdvenaHQ/supacache\n     */\n    supacache: {\n        /**\n         * The URL of the Supacache middleware service.\n         */\n        url: string;\n\n        /**\n         * The cache service (auth) key for the Supacache middleware service. This is the\n         * `SUPACACHE_SERVICE_KEY` secret configured on the worker.\n         *\n         * @see https://github.com/AdvenaHQ/supacache?tab=readme-ov-file#middleware-worker-setup\n         */\n        serviceKey?: string | undefined;\n    };\n\n    /**\n     * The caching strategy to use for the provider.\n     *\n     * Possible values:\n     * - `\"cache-everything\"`: Cache all responses.\n     * - `\"cache-public\"`: Cache only responses to queries on the 'public' schema.\n     * - `\"cache-instructed\"`: Cache responses based on whether the Supabase command has been constructed with `.cache()` called.\n     * - `\"no-cache\"`: Do not cache any responses.\n     *\n     * @default \"cache-everything\" (cache all responses)\n     */\n    strategy?:\n        | \"cache-everything\"\n        | \"cache-public\"\n        | \"cache-instructed\"\n        | \"no-cache\";\n};\n"],
  "mappings": "+GAAA,QAAA,aAAA,EAEA,MAAAA,EAAA,QAAA,mBAAA,EAEAC,EAAA,QAAA,UAAA,EAWaC,EAAqC,MAC9CC,EACAC,IACA,CAEA,GAAIH,EAAA,eAAe,OAAO,WAAa,YAEnC,SAAAD,EAAA,KACI,kIACA,OACA,EAAI,EAID,MAAMG,EAAOC,CAAI,EAI5B,MAAMC,EAAU,CACZ,IAAK,IAAI,IAAIF,CAAe,EAC5B,OAAQC,GAAM,QAAU,MACxB,QAAS,IAAI,QAAQA,GAAM,OAAO,GAIhCE,EAAe,IAAI,IACrBL,EAAA,eAAe,OAAO,WAAW,GAAa,EAIlD,GAAII,EAAQ,SAAW,MAAO,CAE1B,MAAME,EAAe,IAAI,QAAQ,CAC7B,GAAG,OAAO,YAAYF,GAAS,SAAS,QAAO,CAAE,EACjD,GAAIJ,EAAA,eAAe,QAAQ,QAAQ,SAAW,CAAA,EACjD,EAED,OACII,EAAQ,IAAI,SAAS,SAASC,EAAa,QAAQ,GACnDD,EAAQ,IAAI,SAAS,SAAS,cAAc,KAQ5CA,EAAQ,IAAI,SAAWC,EAAa,UAGxCC,EAAa,IACT,sBACAN,EAAA,eAAe,OAAO,WAAW,UAAoB,EAIlD,MAAMI,EAAQ,IAAK,CACtB,GAAGD,EACH,QAASG,EACZ,CACL,CAGA,OAAO,MAAMJ,EAAOC,CAAI,CAC5B,EAhEa,QAAA,4BAA2BF",
  "names": ["log_1", "index_1", "SupacacheCacheProviderFetch", "input", "init", "request", "supacacheUrl", "fetchHeaders"]
}
