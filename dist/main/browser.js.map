{
  "version": 3,
  "sources": ["../../src/browser.ts"],
  "sourcesContent": ["import { createBrowserClient } from \"@supabase/ssr\";\nimport type { SupabaseClient } from \"@supabase/supabase-js\";\nimport { parseOptions } from \"./helpers/parseOptions\";\nimport type {\n    SupabaseClientBrowserOptionsType,\n    UseSupabaseOptions,\n} from \"./types\";\n\n/**\n * Global configuration options for the Supabase client.\n *\n * This variable holds the settings that will be used across the Supabase client\n * to configure its behavior. It is of type `UseSupabaseOptions`, which should\n * define the structure and possible values for these options.\n *\n * @type {UseSupabaseOptions}\n */\nexport let globalOptions: UseSupabaseOptions;\n\n/**\n * Initializes and returns a Supabase browser client with the provided options.\n *\n * @param {UseSupabaseOptions} [userOptions] - Optional configuration options for Supabase.\n * @returns {Promise<SupabaseClient>} A promise that resolves to a Supabase client instance.\n */\nexport async function useSupabase(\n    userOptions?: UseSupabaseOptions | undefined,\n): Promise<SupabaseClient> {\n    // Parse and validate the options\n    const { options, authStrategy } = parseOptions(\n        userOptions,\n        undefined,\n        \"browser\",\n    );\n\n    // Initialise some variables\n    let SUPABASE_API_KEY = \"\" as string;\n\n    // Check whether we're using an API key or a JWT token for authentication. If we're using a token,\n    // it will have already been set by the `parseOptions` function\n    if (authStrategy === \"key\") {\n        SUPABASE_API_KEY = options?.auth?.keys?.publishable as string; // We're using the publishable key\n    }\n\n    // Create a Supabase client with the provided options and return it\n    return createBrowserClient(options?.supabaseUrl, SUPABASE_API_KEY, {\n        // Merge the parsed client configuration with the pre-set cookies configuration option\n        ...(options.config as SupabaseClientBrowserOptionsType),\n    });\n}\n\n// Export the Supabase client hook as the default export\nexport default useSupabase;\n\n// Export Supabase types\nexport type { SupabaseClient, SupabaseClientBrowserOptionsType };\n"],
  "mappings": "iGAyBA,QAAA,YAAAA,EAzBA,MAAAC,EAAA,QAAA,eAAA,EAEAC,EAAA,QAAA,wBAAA,EAuBO,eAAeF,EAClBG,EAA4C,CAG5C,KAAM,CAAE,QAAAC,EAAS,aAAAC,CAAY,KAAKH,EAAA,cAC9BC,EACA,OACA,SAAS,EAIb,IAAIG,EAAmB,GAIvB,OAAID,IAAiB,QACjBC,EAAmBF,GAAS,MAAM,MAAM,gBAIrCH,EAAA,qBAAoBG,GAAS,YAAaE,EAAkB,CAE/D,GAAIF,EAAQ,OACf,CACL,CAGA,QAAA,QAAeJ",
  "names": ["useSupabase", "ssr_1", "parseOptions_1", "userOptions", "options", "authStrategy", "SUPABASE_API_KEY"]
}
